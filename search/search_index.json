{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mkdocs-nbsync","text":"<ul> <li> <p> Notebooks from Markdown   Extend standard markdown syntax to automatically generate notebooks from   documentation    Markdown Features</p> </li> <li> <p> Python File Integration   Directly reference external Python files and reuse functions or classes    Python Integration</p> </li> <li> <p> Code Execution in Images   Execute code within image notation for dynamic visualizations    Dynamic Visualization</p> </li> <li> <p> Dynamic Updates   Real-time synchronization between notebooks and documentation    Dynamic Updates</p> </li> </ul>"},{"location":"#what-is-mkdocs-nbsync","title":"What is mkdocs-nbsync?","text":"<p>mkdocs-nbsync is an innovative MkDocs plugin that treats Jupyter notebooks, Python scripts, and Markdown files as first-class citizens for documentation. Unlike traditional approaches, mkdocs-nbsync provides equal capabilities across all file formats, enabling seamless integration and dynamic execution with real-time synchronization.</p> <p>It solves common challenges faced by data scientists, researchers, and technical writers:</p> <ul> <li>Development happens in notebooks - ideal for experimentation and visualization</li> <li>Documentation lives in markdown - perfect for narrative and explanation</li> <li>Code resides in Python files - organized and version-controlled</li> <li>Traditional integration is challenging - screenshots break, exports get outdated</li> </ul>"},{"location":"#inspiration-comparison","title":"Inspiration &amp; Comparison","text":"<p>mkdocs-nbsync was inspired by and builds upon the excellent work of two MkDocs plugins:</p> <ul> <li>markdown-exec - Provides utilities to execute code blocks in Markdown files</li> <li>mkdocs-jupyter - Enables embedding Jupyter notebooks in MkDocs</li> </ul> <p>While these plugins offer great functionality, mkdocs-nbsync takes a unified approach by:</p> <ol> <li>Equal treatment - Unlike other solutions that prioritize one format, mkdocs-nbsync treats Jupyter notebooks, Python scripts, and Markdown files equally as first-class citizens</li> <li>Real-time synchronization - Changes to source files are immediately reflected in documentation</li> <li>Seamless integration - Consistent syntax across all file formats allows for flexible documentation workflows</li> <li>Image syntax code execution - Unique ability to execute code and embed visualizations anywhere Markdown image syntax (<code>![alt](url)</code>) is valid, including tables, lists, and complex layouts</li> </ol>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>The development of mkdocs-nbsync would not have been possible without the groundwork laid by markdown-exec and mkdocs-jupyter. We extend our sincere gratitude to the developers of these projects for their innovative contributions to the documentation ecosystem.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#notebooks-from-markdown","title":"Notebooks from Markdown","text":"<p>Extend standard markdown syntax to define notebook cells within your documentation. Present code and its output results concisely with tabbed display.</p> MarkdownRendered <pre><code>```python .md#plot\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(2, 1))\nax.plot([1, 3, 3, 4])\n```\n\n![Plot result](){#plot source=\"above\"}\n</code></pre> <pre><code>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(2, 1))\nax.plot([1, 3, 3, 4])\n</code></pre> <p></p>"},{"location":"#python-file-integration","title":"Python File Integration","text":"<p>Directly reference external Python files and reuse defined functions or classes. Avoid code duplication and improve maintainability.</p> plot.py<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef plot(func):\n    x = np.linspace(0, 360)\n    y = func(np.radians(x))\n    fig, ax = plt.subplots(figsize=(2, 1))\n    ax.plot(x, y)\n    ax.set_title(f\"Plot {func.__name__}\")\n\n\nif __name__ == \"__main__\":\n    # %% #sqrt\n    plot(np.sqrt)\n</code></pre> MarkdownRendered <pre><code>![Plot result](plot.py){#sqrt source=\"on\"}\n</code></pre> <pre><code>plot(np.sqrt)\n</code></pre> <p></p>"},{"location":"#code-execution-in-images","title":"Code Execution in Images","text":"<p>Execute Python code directly within image notation and display the results. This enables easy placement of dynamic visualizations in tables or complex layouts.</p> MarkdownRendered <pre><code>|         Sine          |        Cosine         |\n| :-------------------: | :-------------------: |\n| ![](){`plot(np.sin)`} | ![](){`plot(np.cos)`} |\n</code></pre> Sine Cosine"},{"location":"#code-execution-with-markdown-exec-style-syntax","title":"Code Execution with markdown-exec Style Syntax","text":"<p>mkdocs-nbsync supports the markdown-exec style code blocks with the <code>exec=\"1\"</code> attribute as a compatible approach to code execution. While this syntax is familiar to markdown-exec users, mkdocs-nbsync executes it through the Jupyter Notebook engine instead, providing the ability to render diverse MIME content types (HTML, SVG, images, etc.) directly in your documentation. This enables richer and more complex outputs than traditional execution methods.</p> MarkdownRendered <pre><code>```python exec=\"1\" source=\"tabbed-left\"\nimport numpy as np\nfrom PIL import Image\nx = np.random.randint(0, 255, (50, 200), dtype=np.uint8)\nImage.fromarray(x)\n```\n</code></pre> SourceResult <pre><code>import numpy as np\nfrom PIL import Image\nx = np.random.randint(0, 255, (50, 200), dtype=np.uint8)\nImage.fromarray(x)\n</code></pre> <p></p>"},{"location":"#dynamic-updates-and-execution","title":"Dynamic Updates and Execution","text":"<p>Automatic synchronization between notebooks and documentation ensures code changes are reflected in real-time. View changes instantly in MkDocs serve mode.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Follow these steps to get started with mkdocs-nbsync:</p> <ol> <li>Installation</li> <li>Configuration</li> <li>First Steps</li> </ol>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Configuring mkdocs-nbsync for your MkDocs site is simple but powerful, allowing you to customize how notebooks and Python files are integrated with your documentation.</p>"},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>To use mkdocs-nbsync with MkDocs, add it to your <code>mkdocs.yml</code> file:</p> <pre><code>plugins:\n  - search\n  - mkdocs-nbsync\n</code></pre> <p>This minimal configuration uses all the default settings.</p>"},{"location":"getting-started/configuration/#source-directory-configuration","title":"Source Directory Configuration","text":"<p>Specify where mkdocs-nbsync should look for notebooks and Python files:</p> <pre><code>plugins:\n  - search\n  - mkdocs-nbsync:\n      src_dir:\n        - ../notebooks # Path to notebooks directory\n        - ../scripts # Path to Python scripts\n</code></pre> <p>The <code>src_dir</code> option can be:</p> <ul> <li>A single path as a string</li> <li>A list of paths</li> <li>Relative to your docs directory</li> </ul>"},{"location":"getting-started/first-steps/","title":"First Steps","text":"<p>Let's walk through a quick example of using mkdocs-nbsync to integrate notebooks with your MkDocs documentation.</p>"},{"location":"getting-started/first-steps/#setting-up-your-project","title":"Setting Up Your Project","text":"<p>Start with a typical MkDocs project structure:</p> <pre><code>my-project/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 notebooks/\n\u2502   \u251c\u2500\u2500 analysis.ipynb\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 plotting.py\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"getting-started/first-steps/#configure-mkdocs","title":"Configure MkDocs","text":"<p>Update your <code>mkdocs.yml</code> to include mkdocs-nbsync:</p> <pre><code>site_name: My Documentation\ntheme:\n    name: material\n\nplugins:\n    - search\n    - mkdocs-nbsync:\n          src_dir:\n              - ../notebooks\n              - ../scripts\n</code></pre>"},{"location":"getting-started/first-steps/#creating-your-first-integration","title":"Creating Your First Integration","text":""},{"location":"getting-started/first-steps/#1-prepare-a-jupyter-notebook","title":"1. Prepare a Jupyter Notebook","text":"<p>Create or use an existing notebook with visualizations. Tag cells you want to reference with a comment:</p> <pre><code># #simple-plot\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\n\nset_matplotlib_formats(\"svg\")\n\nx = np.linspace(0, 10, 100)\nplt.figure(figsize=(3, 1.5))\nplt.plot(x, np.sin(x))\nplt.title(\"Simple Sine Wave\")\n</code></pre>"},{"location":"getting-started/first-steps/#2-reference-in-your-documentation","title":"2. Reference in Your Documentation","text":"<p>In one of your markdown files (e.g., <code>docs/index.md</code>), add:</p> <pre><code># My Project Documentation\n\nHere's a visualization from our analysis:\n\n![Sine wave plot](analysis.ipynb){#simple-plot}\n</code></pre> <p></p>"},{"location":"getting-started/first-steps/#3-create-a-python-script","title":"3. Create a Python Script","text":"<p>Create a file <code>scripts/plotting.py</code> with visualization functions:</p> scripts/plotting.py<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef plot_sine(frequency=1):\n    \"\"\"Plot a sine wave with given frequency.\"\"\"\n    x = np.linspace(0, 10, 100)\n    plt.figure(figsize=(2, 1.2))\n    plt.plot(x, np.sin(frequency * x))\n    plt.title(f\"Sine Wave (f={frequency})\")\n    plt.ylim(-1.2, 1.2)\n\n\ndef plot_histogram(bins=20):\n    \"\"\"Plot a histogram of random data.\"\"\"\n    data = np.random.randn(1000)\n    plt.figure(figsize=(2, 1.2))\n    plt.hist(data, bins=bins)\n    plt.title(f\"Histogram (bins={bins})\")\n</code></pre>"},{"location":"getting-started/first-steps/#4-use-functions-in-your-documentation","title":"4. Use Functions in Your Documentation","text":"<p>Create a new file <code>docs/examples.md</code>:</p> <pre><code># Examples\n\nLet's demonstrate different plots:\n\n![](plotting.py){#.}\n\n## Sine Waves\n\n|     Frequency = 1     |     Frequency = 2     |\n| :-------------------: | :-------------------: |\n| ![](){`plot_sine(1)`} | ![](){`plot_sine(2)`} |\n\n## Histogram Examples\n\n|           20 Bins           |           50 Bins           |\n| :-------------------------: | :-------------------------: |\n| ![](){`plot_histogram(20)`} | ![](){`plot_histogram(50)`} |\n</code></pre> Frequency = 1 Frequency = 2 20 Bins 50 Bins"},{"location":"getting-started/first-steps/#5-create-a-markdown-based-notebook","title":"5. Create a Markdown-Based Notebook","text":"<p>Create a file <code>docs/custom.md</code>:</p> <pre><code># Custom Analysis\n\nHere's an analysis created directly in markdown:\n\n```python .md#_\nimport numpy as np\nimport pandas as pd\n\n# Generate sample data\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100),\n    'group': np.random.choice(['A', 'B', 'C'], 100)\n})\n```\n\n```python .md#scatter\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\n\nset_matplotlib_formats(\"svg\")\n\nplt.figure(figsize=(3, 2))\nsns.scatterplot(data=data, x='x', y='y', hue='group')\nplt.title('Scatter Plot by Group')\n```\n\n![Scatter plot](.md){#scatter}\n</code></pre> <p></p> <p>You can also use the <code>exec</code> attribute to execute the code and display the result:</p> <pre><code>```python exec=\"1\"\nfig, ax = plt.subplots(figsize=(3, 2))\nax.plot([1, 3, 2])\n```\n</code></pre> <p></p>"},{"location":"getting-started/first-steps/#7-run-your-documentation","title":"7. Run Your Documentation","text":"<p>Start the MkDocs development server:</p> <pre><code>mkdocs serve --open\n</code></pre>"},{"location":"getting-started/first-steps/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/first-steps/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Images Not Showing:</p> <ul> <li>Check paths in your configuration</li> <li>Ensure notebooks have correctly tagged cells</li> <li>Verify Python dependencies are installed</li> </ul> </li> <li> <p>Execution Errors:</p> <ul> <li>Check the console output for error messages</li> <li>Ensure your environment has all required packages</li> </ul> </li> <li> <p>Changes Not Reflecting:</p> <ul> <li>Hard refresh your browser</li> <li>Restart the MkDocs server</li> <li>Check file paths and identifiers</li> </ul> </li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Installing mkdocs-nbsync is straightforward and can be done using uv or pip, the Python package manager.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing nbsync, ensure you have the following:</p> <ul> <li>Python 3.10 or higher</li> <li>uv or pip (Python package manager)</li> <li>MkDocs 1.6 or higher (documentation generator)</li> </ul>"},{"location":"getting-started/installation/#basic-installation","title":"Basic Installation","text":"<p>Install mkdocs-nbsync using uv or pip:</p> <pre><code>uv pip install mkdocs-nbsync\n# or\npip install mkdocs-nbsync\n</code></pre> <p>This command installs the latest stable version of mkdocs-nbsync and its core dependencies.</p>"},{"location":"getting-started/installation/#installation-of-nbconvert","title":"Installation of nbconvert","text":"<p>For dynamic execution functionality, install nbconvert:</p> <pre><code>uv pip install nbconvert\n# or\npip install nbconvert\n</code></pre>"}]}